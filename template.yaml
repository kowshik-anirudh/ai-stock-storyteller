AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AI Stock Storyteller â€“ serverless API with S3 caching

Parameters:
  OpenAIKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key (kept as Lambda env var)
  OpenAIModel:
    Type: String
    Default: gpt-4o-mini
    Description: OpenAI model to use
  AllowedOrigins:
    Type: String
    Default: "*"
    Description: CORS allowed origins (comma-separated or *)

Globals:
  Api:
    Cors:
      # Force quotes around origin so API Gateway doesn't reject bare *
      AllowOrigin: !Sub "'${AllowedOrigins}'"
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

Resources:
  CacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  StockFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: S3CacheAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:HeadObject
                Resource:
                  - !Sub "${CacheBucket.Arn}/*"

  StockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: app.handler
      Runtime: python3.11
      Architectures:
        - x86_64
      MemorySize: 1536
      Timeout: 25
      Role: !GetAtt StockFunctionRole.Arn
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIKey
          OPENAI_MODEL: !Ref OpenAIModel
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          S3_CACHE_BUCKET: !Ref CacheBucket
          S3_CACHE_TTL_SECONDS: "1800"  # 30 minutes
      Events:
        HealthV2:
          Type: Api
          Properties:
            Path: /health
            Method: GET
        GetStoryV2:
          Type: Api
          Properties:
            Path: /api/story/{ticker}
            Method: GET

Outputs:
  ApiBaseUrl:
    Description: API base URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api"
  CacheBucketName:
    Description: S3 bucket used for caching stock stories
    Value: !Ref CacheBucket
echo openai.key >> .gitignore
git add .gitignore
git commit -m "Add openai.key to gitignore"